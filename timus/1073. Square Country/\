#include <bits/stdc++.h>

using u32 = unsigned;
using i64 = long long;
using u64 = unsigned long long;
using i128 = __int128;
using u128 = unsigned __int128;

constexpr int MXN1 = 250, MXN2 = 60000 + 3;

int sz;
std::vector<int> prfsq;
i64 mem[MXN1][MXN2];

i64 go(int idx, int sm) {
	if (idx == sz) {
		if (sm == 0) return 0;
		else return INT_MAX;
	}

	i64 &ret = mem[idx][sm];
	if (~ret) return ret;
	ret = go(idx + 1, sm);
	if (sm - prfsq[idx] >= 0)
		ret = std::min(ret, 1 + go(idx, sm - prfsq[idx]));
	return ret;
}

int main() {
	std::ios::sync_with_stdio(0);
	std::cin.tie(0);
	
	int sm;	std::cin >> sm;
	for (int i = 1; i * i <= sm; ++i) prfsq.push_back(i * i);
	sz = (int)prfsq.size();
	/*fprintf(stderr, "TEST: ");*/
	/*for (int i = 0; i < sz; ++i) fprintf(stderr, "%d ", prfsq[i]);*/
	/*fprintf(stderr, "\n");*/

	for (int i = 0; i < sz; ++i)
		for (int j = 0; j <= sm; ++j)
			mem[i][j] = -1;
	return std::cout << go(0, sm), 0;
}
